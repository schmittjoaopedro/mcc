package com.github.schmittjoaopedro.mcc.object;

import com.github.schmittjoaopedro.mcc.message.MessageCompiler;

/**
 * This class is used by the consumer to create a class
 * to be compiled in memory. The same object is used to
 * return the generated bytecode.
 *
 * @author schmittjoaopedro
 * @version 1.0.0
 * @since 1.0.0
 *
 */
public class SourceClass {

    private static final String DOT = ".";

    /**
     * Java file extension
     */
    private static final String JAVA_EXT = ".java";

    /**
     * Simple class name, without the package prefix. Ex: List
     */
    private String className;

    /**
     * Class package name, without the class name suffix. Ex: "java.util"
     */
    private String packageName;

    /**
     * Source code of class to be compiled
     */
    private String sourceCode;

    /**
     * The bytecode generated by the compiler
     */
    private byte[] bytecode;

    /**
     * Compilation status
     */
    private MessageCompiler status;

    public SourceClass() {
        super();
    }

    public SourceClass(String packetName, String className, String sourceCode) {
        super();
        this.setPackageName(packetName);
        this.setClassName(className);
        this.setSourceCode(sourceCode);
    }

    /**
     * Validate the source class, checks all necessary attributes required
     * by the compiler as: package name, class name and source code.
     *
     * @return isValid the output is valid
     */
    public Boolean isValid() {
        if( this.getPackageName() != null && !this.getPackageName().trim().equals("") &&
                this.getClassName() != null && !this.getClassName().trim().equals("") &&
                this.getSourceCode() != null && !this.getSourceCode().trim().equals("")) {
            return Boolean.TRUE;
        } else {
            return Boolean.FALSE;
        }
    }

    /**
     * Convert the class name in a file class name, add the prefix of .java.
     * The compiler required the .java extension.
     *
     * @return javaFileClassName the output java file class name
     */
    public String getJavaFileClassName() {
        return this.className + JAVA_EXT;
    }

    /**
     * Return the full className, combining the package name with className
     * ex: "java.util.List"
     *
     * @return fullClassName the output full class name
     */
    public String getFullClassName() {
        return this.getPackageName() + DOT + this.getClassName();
    }

    /**
     * @return className the output class name
     */
    public String getClassName() {
        return className;
    }

    /**
     * @param className the input class name
     */
    public void setClassName(String className) {
        this.className = className;
    }

    /**
     * @return packageName the output package name
     */
    public String getPackageName() {
        return packageName;
    }

    /**
     * @param packageName the input package name
     */
    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }

    /**
     * @return sourceCode the output source code
     */
    public String getSourceCode() {
        return sourceCode;
    }

    /**
     * @param sourceCode the input source code
     */
    public void setSourceCode(String sourceCode) {
        this.sourceCode = sourceCode;
    }

    /**
     * @return bytecode the output bytecode
     */
    public byte[] getBytecode() {
        return bytecode;
    }

    /**
     * @param bytecode the input bytecode
     */
    public void setBytecode(byte[] bytecode) {
        this.bytecode = bytecode;
    }

    /**
     * @return status the output status
     */
    public MessageCompiler getStatus() {
        return status;
    }

    /**
     * @param status the input status
     */
    public void setStatus(MessageCompiler status) {
        this.status = status;
    }

}
